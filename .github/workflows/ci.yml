name: Continuous Integration and Build

on:
  pull_request:
    branches: [main, production] # Triggers the workflow on pull requests to the main and production branches
  push:
    branches: [main, production] # Triggers the workflow on pushes to the main and production branches

jobs:
  flutter_test:
    runs-on: ubuntu-latest # Specifies the runner environment

    env:
      # Reference the GitHub Secrets
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ACCESS_TOKEN_LIFETIME: ${{ secrets.ACCESS_TOKEN_LIFETIME }}
      REFRESH_TOKEN_LIFETIME: ${{ secrets.REFRESH_TOKEN_LIFETIME }}
      AUTH_TOKEN_SECRET: ${{ secrets.AUTH_TOKEN_SECRET }}

    steps:
      - uses: actions/checkout@v4 # Checks out your repository under $GITHUB_WORKSPACE

      - name: Set up Flutter
        uses: subosito/flutter-action@v2 # Sets up Flutter environment
        with:
          channel: stable

      - name: Install client dependencies
        # Change to the client directory and install dependencies
        run: |
          cd client 
          flutter pub get

      - name: Lint client code
        # Change to the client directory and run the linter
        run: |
          cd client
          dart format --output=none --set-exit-if-changed .

      # - name: Analyze project source
      #   # Change to the client directory and analyze the project source
      #   run: |
      #     cd client
      #     flutter analyze

      - name: Run client tests
        # Change to the client directory and run the tests
        run: |
          cd client 
          flutter test

  server_test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.11" # Specify the Python version

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r server/requirements.txt

      - name: Run server tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        run: |
          source venv/bin/activate
          # Export environment variables to be accessible by tests
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV
          echo "ACCESS_TOKEN_LIFETIME=${{ secrets.ACCESS_TOKEN_LIFETIME }}" >> $GITHUB_ENV
          echo "REFRESH_TOKEN_LIFETIME=${{ secrets.REFRESH_TOKEN_LIFETIME }}" >> $GITHUB_ENV
          echo "AUTH_TOKEN_SECRET=${{ secrets.AUTH_TOKEN_SECRET }}" >> $GITHUB_ENV

          cd server/tt_backend
          python manage.py makemigrations
          python manage.py migrate
          python manage.py test

  # Commenting this block out until we correctly set up the xcode requirements (signing/certificate)
  # build_ios:
  #   if: github.ref == 'refs/heads/production' # Specifies that this job should only run on the production branch
  #   name: Build iOS
  #   needs: [flutter_test] # Specifies that this job depends on the successful completion of flutter_test
  #   runs-on: macos-latest # Specifies macOS runner for iOS build

  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         channel: stable
  #     - name: Install dependencies
  #       run: flutter pub get
  #     - name: Clean build
  #       run: flutter clean # Cleans previous builds
  #     - name: Build iOS
  #       run: flutter build ipa --obfuscate --split-debug-info=build/app/outputs/symbols # Builds an iOS app archive (.ipa file)
  #     - name: Upload Symbols
  #       uses: actions/upload-artifact@v2
  #       if: github.ref == 'refs/heads/production' # Specifies that this step should only run on the production branch
  #       with:
  #         name: ios-symbols
  #         path: build/app/outputs/symbols

  # build_apk:
  #   if: github.ref == 'refs/heads/production' # Specifies that this job should only run on the production branch
  #   name: Build Android
  #   runs-on: ubuntu-latest # Specifies Ubuntu runner for Android build

  #   needs: [flutter_test] # Specifies that this job depends on the successful completion of flutter_test

  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         channel: stable
  #     - name: Install dependencies
  #       run: flutter pub get
  #     - name: Clean build
  #       run: flutter clean
  #     - name: Build APK
  #       run: flutter build apk --obfuscate --split-debug-info=build/app/outputs/symbols # Builds an Android APK file
  #     - name: Upload Symbols
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: android-symbols
  #         path: build/app/outputs/symbols
