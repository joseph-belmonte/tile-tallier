name: Continuous Integration and Build

on:
  # Trigger only on pushes to `main` and non-main branches
  push:
    branches:
      - main # Deploys only on `main` branch
      - "feature/*" # Use specific patterns to include other branches
      - "develop" # Optional: Add any branch pattern you want to test on push
  # Trigger only on pull requests targeting `main` to avoid double runs
  pull_request:
    branches:
      - main

jobs:
  flutter_test:
    runs-on: ubuntu-latest # Specifies the runner environment

    env:
      # Reference the GitHub Secrets
      DJANGO_SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ACCESS_TOKEN_LIFETIME: ${{ secrets.ACCESS_TOKEN_LIFETIME }}
      REFRESH_TOKEN_LIFETIME: ${{ secrets.REFRESH_TOKEN_LIFETIME }}
      AUTH_TOKEN_SECRET: ${{ secrets.AUTH_TOKEN_SECRET }}
      GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}

    steps:
      - uses: actions/checkout@v4 # Checks out your repository under $GITHUB_WORKSPACE

      - name: Set up Flutter
        uses: subosito/flutter-action@v2 # Sets up Flutter environment
        with:
          channel: stable

      - name: Install client dependencies
        # Change to the client directory and install dependencies
        run: |
          cd client 
          flutter pub get

      - name: Lint client code
        # Change to the client directory and run the linter
        run: |
          cd client
          dart format --output=none --set-exit-if-changed .

      - name: Run client tests
        # Change to the client directory and run the tests
        run: |
          cd client 
          flutter test

  server_test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11" # Specify the Python version

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          cd server
          pip install -r requirements.txt

      # - name: Debug - Print working directory and list files
      #   run: |
      #     pwd  # Print the current working directory
      #     ls -R  # Recursively list all files and directories

      - name: Run server tests
        env:
          # Postgres Config
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
          DATABASE_ENGINE: postgresql
          DATABASE_NAME: test_db
          DATABASE_USERNAME: postgres
          DATABASE_PASSWORD: postgres
          DATABASE_HOST: localhost # Use 'localhost' instead of 'db' for CI
          DATABASE_PORT: 5432

          # Django Config
          DJANGO_DEBUG: True
          DJANGO_SECRET_KEY: "test_secret_key"
          DJANGO_ALLOWED_HOSTS: "localhost,127.0.0.1"

          # JWT and Authentication settings
          AUTH_JWT_SIGNING_KEY: "test_auth_jwt_signing_key"
          AUTH_TOKEN_SECRET: "test_auth_token_secret"
          ACCESS_TOKEN_LIFETIME: "60m"
          REFRESH_TOKEN_LIFETIME: "1d"

          # Pagination settings
          API_DEFAULT_PAGE_SIZE: 10
          API_MAX_PAGE_SIZE: 100

          # Google API Key
          GOOGLE_API_KEY: "test_google_api_key"

        run: |
          source venv/bin/activate
          cd server/tt_backend
          python manage.py makemigrations
          python manage.py migrate
          python manage.py test

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [flutter_test, server_test]
  #   if: github.ref == 'refs/heads/main' # Only run on merges/pushes to `main`
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Set up SSH
  #       uses: webfactory/ssh-agent@v0.5.3
  #       with:
  #         ssh-private-key: ${{ secrets.DO_SSH_PRIVATE_KEY }}

  #     - name: Deploy to DigitalOcean
  #       run: |
  #         ssh -o StrictHostKeyChecking=no root@198.199.74.219 << 'EOF'
  #           # Create the project directory if it doesn't exist
  #           mkdir -p /root/tile-tallier/
  #           cd /root/tile-tallier/

  #           # Check if the .git directory exists to initialize only if necessary
  #           if [ ! -d ".git" ]; then
  #             git init
  #             git remote add origin https://github.com/joseph-belmonte/tile-tallier.git
  #             git config core.sparseCheckout true
  #             echo "server/*" > .git/info/sparse-checkout
  #           fi

  #           # Ensure the branch name matches exactly with the one in the repository
  #           git pull origin main

  #           # Go to the server directory and manage Docker services
  #           cd server
  #           docker-compose down
  #           docker-compose up --build -d
  #         EOF
